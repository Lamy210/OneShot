version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: oneshot_postgres
    environment:
      POSTGRES_DB: oneshot_db
      POSTGRES_USER: oneshot
      POSTGRES_PASSWORD: password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - oneshot_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: oneshot_redis
    ports:
      - "6379:6379"
    networks:
      - oneshot_network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: oneshot_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - oneshot_network
    command: server /data --console-address ":9001"
    restart: unless-stopped

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: oneshot_keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/oneshot_db
      KC_DB_USERNAME: oneshot
      KC_DB_PASSWORD: password123
      KC_HOSTNAME: ${DOMAIN}
      KC_HTTP_ENABLED: true
    ports:
      - "8080:8080"
    networks:
      - oneshot_network
    depends_on:
      - postgres
    command: start-dev
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: oneshot_backend
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      FRONTEND_URL: ${FRONTEND_URL}
      NODE_ENV: production
    ports:
      - "3001:3001"
    networks:
      - oneshot_network
    depends_on:
      - postgres
      - redis
      - keycloak
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: oneshot_frontend
    environment:
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      KEYCLOAK_ID: ${KEYCLOAK_ID}
      KEYCLOAK_SECRET: ${KEYCLOAK_SECRET}
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER}
      BACKEND_URL: ${BACKEND_URL}
    ports:
      - "3000:3000"
    networks:
      - oneshot_network
    depends_on:
      - backend
    restart: unless-stopped

  # Reverse Proxy & SSL
  caddy:
    image: caddy:2-alpine
    container_name: oneshot_caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - oneshot_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: oneshot_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - oneshot_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: oneshot_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - oneshot_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Management
  loki:
    image: grafana/loki:2.9.0
    container_name: oneshot_loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - oneshot_network
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
  caddy_data:
  caddy_config:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  oneshot_network:
    driver: bridge
