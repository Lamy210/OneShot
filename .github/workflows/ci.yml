name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Lint
      run: pnpm run lint

    - name: Type check
      run: pnpm turbo run build --dry=json

    - name: Unit tests
      run: pnpm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build packages
      run: pnpm turbo run build

    - name: Build Docker images
      run: |
        docker build -f docker/Dockerfile.frontend -t oneshot/frontend:${{ github.sha }} .
        docker build -f docker/Dockerfile.backend -t oneshot/backend:${{ github.sha }} .

    - name: Save Docker images
      run: |
        docker save oneshot/frontend:${{ github.sha }} | gzip > frontend-image.tar.gz
        docker save oneshot/backend:${{ github.sha }} | gzip > backend-image.tar.gz

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          frontend-image.tar.gz
          backend-image.tar.gz
        retention-days: 1

  security-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: docker-images

    - name: Load Docker images
      run: |
        docker load < frontend-image.tar.gz
        docker load < backend-image.tar.gz

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'oneshot/frontend:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'oneshot/backend:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-frontend-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab - Backend
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-backend-results.sarif'
